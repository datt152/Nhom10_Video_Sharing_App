import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { Image } from '../types/database.types';

const API_BASE_URL = 'http://192.168.1.117:3000'; // ‚ö†Ô∏è nh·ªõ ki·ªÉm tra IP n√†y
export const CURRENT_USER_ID = 'u1';

export const useImage = () => {
    const [publicImages, setPublicImages] = useState<Image[]>([]);
    const [privateImages, setPrivateImages] = useState<Image[]>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const fetchImages = useCallback(async () => {
        console.log("üöÄ G·ªçi API l·∫•y danh s√°ch ·∫£nh...");
        setLoading(true);
        try {
            const res = await axios.get(`${API_BASE_URL}/images`);
            console.log("‚úÖ K·∫øt qu·∫£ API:", res.data);

            const data = res.data;

            if (Array.isArray(data)) {
                const publicList = data.filter((img) => img.isPublic === true);
                const privateList = data.filter((img) => img.isPublic === false);

                console.log(`üì∏ Public: ${publicList.length} ·∫£nh`);
                console.log(`üîí Private: ${privateList.length} ·∫£nh`);

                setPublicImages(publicList);
                setPrivateImages(privateList);
            } else {
                console.error("‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† m·∫£ng:", data);
                setPublicImages([]);
                setPrivateImages([]);
            }
        } catch (err: any) {
            console.error("üî• L·ªói khi fetch images:", err);
            setError(err.message || 'Error fetching images');
        } finally {
            setLoading(false);
            console.log("‚úÖ Ho√†n t·∫•t t·∫£i ·∫£nh.\n");
        }
    }, []);

    useEffect(() => {
        fetchImages();
    }, [fetchImages]);
    const getImageLikes = async (imageId: string): Promise<number> => {
        try {
            console.log("üîç G·ªçi API l·∫•y l∆∞·ª£t like:", `${API_BASE_URL}/images/${imageId}`);
            const response = await fetch(`${API_BASE_URL}/images/${imageId}`);

            if (!response.ok) {
                console.error("‚ùå L·ªói response:", response.status);
                return 0;
            }

            const image = await response.json();
            console.log("‚úÖ D·ªØ li·ªáu ·∫£nh:", image);

            // üî• N·∫øu c√≥ likedBy l√† m·∫£ng, tr·∫£ v·ªÅ ƒë·ªô d√†i
            if (Array.isArray(image.likedBy)) {
                return image.likedBy.length;
            }

            // N·∫øu c√≥ tr∆∞·ªùng likes (ph√≤ng khi c≈© v·∫´n c√≤n)
            if (typeof image.likes === "number") {
                return image.likes;
            }

            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ likedBy ho·∫∑c likes trong image:", image);
            return 0;
        } catch (error) {
            console.error("üî• L·ªói khi l·∫•y l∆∞·ª£t like:", error);
            return 0;
        }
    };

    const toggleLike = async (imageId: string, userId: string) => {
        try {
            const res = await axios.get(`${API_BASE_URL}/images/${imageId}`);
            const image = res.data;

            let updatedLikedBy = image.likedBy || [];
            if (updatedLikedBy.includes(userId)) {
                updatedLikedBy = updatedLikedBy.filter((id: string) => id !== userId);
            } else {
                updatedLikedBy.push(userId);
            }

            await axios.patch(`${API_BASE_URL}/images/${imageId}`, {
                likedBy: updatedLikedBy,
                likes: updatedLikedBy.length,
            });

            return updatedLikedBy.length; // tr·∫£ v·ªÅ s·ªë l∆∞·ª£t like m·ªõi
        } catch (err) {
            console.error("üî• L·ªói c·∫≠p nh·∫≠t like:", err);
            return null;
        }
    };

    return {
        publicImages,
        privateImages,
        loading,
        error,
        refresh: fetchImages,
        getImageLikes,
        toggleLike // ‚úÖ th√™m d√≤ng n√†y
    };
};
